var capacitorCapacitorHealthkit = (function (exports, core) {
    'use strict';

    const CapacitorHealthkit = core.registerPlugin('CapacitorHealthkit', {
        web: () => Promise.resolve().then(function () { return web; }).then(m => new m.CapacitorHealthkitWeb()),
    });

    class CapacitorHealthkitWeb extends core.WebPlugin {
        async echo() {
            throw new Error('Method not implemented.');
        }
        async requestAuthorization() {
            throw new Error('Method not implemented.');
        }
        async isAvailable() {
            throw new Error('Method not implemented.');
        }
        async getAuthorizationStatus(options) {
            console.log({ options });
            throw new Error('Method not implemented.');
        }
        async getStatisticsCollection(options) {
            console.log({ options });
            throw new Error('Method not implemented.');
        }
        async getBodyMassEntries(options) {
            console.log({ options });
            throw new Error('Method not implemented.');
        }
        async getWorkouts(options) {
            console.log({ options });
            throw new Error('Method not implemented.');
        }
    }

    var web = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CapacitorHealthkitWeb: CapacitorHealthkitWeb
    });

    exports.CapacitorHealthkit = CapacitorHealthkit;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
