# Customise this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

require 'tempfile'
require 'json'

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.219.0"

default_platform :ios

platform :ios do
  
  # Define workspace and scheme
  scheme = "LogYourBody"
  project = "LogYourBody.xcodeproj"
  
  before_all do
    # Set up environment
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "180"
    ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "10"
    
    # Ensure project path is correct
    ios_dir = File.expand_path("..", Dir.pwd.end_with?("/fastlane") ? Dir.pwd : "#{Dir.pwd}/fastlane")
    project_path = File.join(ios_dir, project)
    
    unless File.exist?(project_path)
      UI.user_error!("Project file not found at: #{project_path}")
    end
  end

  desc "Run SwiftLint"
  lane :lint do
    swiftlint(
      mode: :lint,
      strict: true,
      raise_if_swiftlint_error: true,
      reporter: "json"
    )
  end

  desc "Run tests"
  lane :test do
    # Use absolute path from current directory
    proj_path = File.expand_path("../LogYourBody.xcodeproj", __FILE__)
    
    run_tests(
      project: proj_path,
      scheme: scheme,
      device: "iPhone 16",
      clean: true,
      code_coverage: true
    )
  end

  desc "Build for development"
  lane :build_dev do
    build_app(
      project: project,
      scheme: scheme,
      configuration: "Debug",
      skip_archive: true,
      skip_codesigning: true,
      destination: "generic/platform=iOS Simulator"
    )
  end

  desc "Build and upload Alpha to TestFlight (dev branch - rapid)"
  lane :alpha do |options|
    # Ensure we have a clean state
    clean_build_artifacts
    
    # Skip app_store_connect_api_key due to OpenSSL curve issue
    # Fastlane will use these environment variables automatically:
    # FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD
    # APP_STORE_CONNECT_API_KEY_ID
    # APP_STORE_CONNECT_API_KEY_ISSUER_ID
    # APP_STORE_CONNECT_API_KEY
    
    # Build number should be passed in
    if options[:build_number]
      ios_dir = File.expand_path("..", Dir.pwd)
      increment_build_number(
        build_number: options[:build_number],
        xcodeproj: File.join(ios_dir, project)
      )
    end
    
    # Build the app (fast, minimal processing)
    # When running from bundle exec, we're in the fastlane directory
    ios_dir = File.expand_path("..", Dir.pwd)
    
    # Widget has been removed from Xcode project
    
    build_app(
      project: File.join(ios_dir, project),
      scheme: scheme,
      configuration: "Release",
      export_method: "app-store",
      export_team_id: ENV["APPLE_TEAM_ID"],
      export_options: {
        teamID: ENV["APPLE_TEAM_ID"],
        provisioningProfiles: {
          "LogYourBody.LogYourBody" => "Github CI App Store"
        },
        compileBitcode: false,
        uploadBitcode: false,
        uploadSymbols: true,
        signingStyle: "manual"
      },
      # Speed optimizations
      skip_package_dependencies_resolution: true,
      disable_package_automatic_updates: true,
      cloned_source_packages_path: "SourcePackages",
      skip_profile_detection: true,
      # Build settings
      xcargs: "PROVISIONING_PROFILE_SPECIFIER='Github CI App Store' CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']} CODE_SIGN_IDENTITY='iPhone Distribution'"
    )
    
    # Read release notes if provided
    release_notes = "Alpha Build"
    if options[:release_notes_file] && File.exist?(options[:release_notes_file])
      release_notes = File.read(options[:release_notes_file])
    end
    
    # Upload to TestFlight
    # Get groups from options or default to Internal Testers
    test_groups = options[:groups] ? options[:groups].split(",") : ["Internal Testers"]
    
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: ENV["APP_STORE_APP_ID"],
      team_id: ENV["APPLE_TEAM_ID"],
      groups: test_groups,
      changelog: release_notes,
      distribute_external: false
    )
    
    # Clean up
    clean_build_artifacts
  end

  desc "Build and upload to TestFlight (preview branch - beta)"
  lane :beta do
    # Ensure we have a clean state
    clean_build_artifacts
    
    # Set up App Store Connect API key if available
    if ENV["APP_STORE_CONNECT_API_KEY_ID"] && ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"] && ENV["APP_STORE_CONNECT_API_KEY_PATH"]
      # Use environment variables directly
      app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
        duration: 1200, # 20 minutes
        in_house: false
      )
    elsif ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"] && File.exist?(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"])
      # Fallback to JSON parsing
      require 'json'
      api_key_data = JSON.parse(File.read(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"]))
      
      # Create a temporary file with just the key content
      key_file = Tempfile.new(['asc_key', '.p8'])
      key_file.write(api_key_data['key'].gsub('\\n', "\n"))
      key_file.close
      
      app_store_connect_api_key(
        key_id: api_key_data['key_id'],
        issuer_id: api_key_data['issuer_id'],
        key_filepath: key_file.path,
        duration: 1200, # 20 minutes
        in_house: api_key_data['in_house'] || false
      )
      
      # Clean up temp file will happen automatically
    end
    
    # Increment build number
    build_number = Time.now.strftime("%Y%m%d%H%M%S")
    increment_build_number(
      build_number: build_number,
      xcodeproj: project
    )
    
    # Build the app
    build_app(
      project: project,
      scheme: scheme,
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "LogYourBody.LogYourBody" => ENV["IOS_PROVISIONING_PROFILE_NAME"]
        }
      }
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: ENV["APP_STORE_APP_ID"],
      team_id: ENV["APPLE_TEAM_ID"],
      groups: ["Beta Testers"],
      distribute_external: true # Beta includes external testers
    )
    
    # Clean up
    clean_build_artifacts
  end

  desc "Build for CI"
  lane :ci_build do
    # This lane is specifically for CI environments
    # Use absolute path from current directory
    proj_path = File.expand_path("../LogYourBody.xcodeproj", __FILE__)
    
    build_app(
      project: proj_path,
      scheme: scheme,
      configuration: "Debug",
      skip_archive: true,
      skip_codesigning: true,
      derived_data_path: "build",
      destination: "platform=iOS Simulator,name=iPhone 16"
    )
  end

  desc "Build for release (archive only)"
  lane :build_release do
    build_app(
      project: project,
      scheme: scheme,
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "LogYourBody.LogYourBody" => ENV["IOS_PROVISIONING_PROFILE_NAME"]
        }
      },
      output_directory: "build",
      output_name: "LogYourBody"
    )
  end

  desc "Upload existing IPA to TestFlight"
  lane :upload_testflight do |options|
    # Set up App Store Connect API key if available
    if ENV["APP_STORE_CONNECT_API_KEY_ID"] && ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"] && ENV["APP_STORE_CONNECT_API_KEY_PATH"]
      # Use environment variables directly
      app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
        duration: 1200, # 20 minutes
        in_house: false
      )
    elsif ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"] && File.exist?(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"])
      # Fallback to JSON parsing
      require 'json'
      api_key_data = JSON.parse(File.read(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"]))
      
      # Create a temporary file with just the key content
      key_file = Tempfile.new(['asc_key', '.p8'])
      key_file.write(api_key_data['key'].gsub('\\n', "\n"))
      key_file.close
      
      app_store_connect_api_key(
        key_id: api_key_data['key_id'],
        issuer_id: api_key_data['issuer_id'],
        key_filepath: key_file.path,
        duration: 1200, # 20 minutes
        in_house: api_key_data['in_house'] || false
      )
      
      # Clean up temp file will happen automatically
    end
    
    # Upload IPA
    upload_to_testflight(
      ipa: options[:ipa_path],
      skip_waiting_for_build_processing: true,
      apple_id: ENV["APP_STORE_APP_ID"],
      team_id: ENV["APPLE_TEAM_ID"],
      groups: options[:groups] ? options[:groups].split(",") : ["Beta Testers"],
      changelog: options[:changelog_file] ? File.read(options[:changelog_file]) : "New build",
      distribute_external: true
    )
  end

  desc "Submit existing IPA to App Store"
  lane :submit_app_store do |options|
    # Set up App Store Connect API key if available
    if ENV["APP_STORE_CONNECT_API_KEY_ID"] && ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"] && ENV["APP_STORE_CONNECT_API_KEY_PATH"]
      # Use environment variables directly
      app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
        duration: 1200, # 20 minutes
        in_house: false
      )
    elsif ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"] && File.exist?(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"])
      # Fallback to JSON parsing
      require 'json'
      api_key_data = JSON.parse(File.read(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"]))
      
      # Create a temporary file with just the key content
      key_file = Tempfile.new(['asc_key', '.p8'])
      key_file.write(api_key_data['key'].gsub('\\n', "\n"))
      key_file.close
      
      app_store_connect_api_key(
        key_id: api_key_data['key_id'],
        issuer_id: api_key_data['issuer_id'],
        key_filepath: key_file.path,
        duration: 1200, # 20 minutes
        in_house: api_key_data['in_house'] || false
      )
      
      # Clean up temp file will happen automatically
    end
    
    # Upload to App Store Connect
    upload_to_app_store(
      ipa: options[:ipa_path],
      force: true,
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: options[:submit_for_review] || false,
      automatic_release: options[:automatic_release] || false,
      phased_release: options[:phased_release] || false,
      apple_id: ENV["APP_STORE_APP_ID"],
      team_id: ENV["APPLE_TEAM_ID"]
    )
  end

  desc "Deploy to App Store (build + upload)"
  lane :release do
    # Ensure we have a clean state
    clean_build_artifacts
    
    # Set up App Store Connect API key if available
    if ENV["APP_STORE_CONNECT_API_KEY_ID"] && ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"] && ENV["APP_STORE_CONNECT_API_KEY_PATH"]
      # Use environment variables directly
      app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
        duration: 1200, # 20 minutes
        in_house: false
      )
    elsif ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"] && File.exist?(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"])
      # Fallback to JSON parsing
      require 'json'
      api_key_data = JSON.parse(File.read(ENV["APP_STORE_CONNECT_API_KEY_JSON_PATH"]))
      
      # Create a temporary file with just the key content
      key_file = Tempfile.new(['asc_key', '.p8'])
      key_file.write(api_key_data['key'].gsub('\\n', "\n"))
      key_file.close
      
      app_store_connect_api_key(
        key_id: api_key_data['key_id'],
        issuer_id: api_key_data['issuer_id'],
        key_filepath: key_file.path,
        duration: 1200, # 20 minutes
        in_house: api_key_data['in_house'] || false
      )
      
      # Clean up temp file will happen automatically
    end
    
    # Build the app
    build_app(
      project: project,
      scheme: scheme,
      configuration: "Release",
      export_method: "app-store"
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      force: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false,
      apple_id: ENV["APP_STORE_APP_ID"],
      team_id: ENV["APPLE_TEAM_ID"]
    )
    
    # Clean up
    clean_build_artifacts
  end

  desc "Create development certificates and profiles"
  lane :setup_certificates do
    match(
      type: "development",
      app_identifier: "LogYourBody.LogYourBody",
      readonly: false
    )
  end

  desc "Create distribution certificates and profiles"
  lane :setup_distribution do
    match(
      type: "appstore",
      app_identifier: "LogYourBody.LogYourBody",
      readonly: false
    )
  end

  error do |lane, exception|
    # Handle errors
    UI.error("Something went wrong in lane #{lane}: #{exception.message}")
  end

end