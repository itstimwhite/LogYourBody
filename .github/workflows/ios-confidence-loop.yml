name: iOS Confidence Loop

on:
  workflow_run:
    workflows: ["iOS Rapid Loop"]
    branches: [dev]
    types: [completed]
  push:
    branches: [preview]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-confidence-loop.yml'
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC
  workflow_dispatch:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Lint job - quick validation
  lint:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-14
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        bundle exec fastlane lint

  # Build for testing - creates test runner app
  build-for-testing:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-14
    timeout-minutes: 20
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=ios-test-build-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
    
    - name: Cache test build
      id: cache-test-build
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/DerivedData/Build/Products
          apps/ios/test-runner.xctestrun
        key: ${{ steps.cache-key.outputs.key }}
    
    - name: Build for testing
      if: steps.cache-test-build.outputs.cache-hit != 'true'
      run: |
        cd apps/ios
        
        # Build specifically for testing without running tests
        xcodebuild build-for-testing \
          -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -configuration Debug \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -derivedDataPath DerivedData \
          -resultBundlePath build-for-testing.xcresult \
          | xcbeautify
        
        # Save the test runner configuration
        find DerivedData/Build/Products -name "*.xctestrun" -exec cp {} test-runner.xctestrun \;

  # Parallel test execution using matrix strategy
  test-suite:
    needs: [lint, build-for-testing]
    runs-on: macos-14
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test-type:
          - name: "Unit Tests"
            filter: "LogYourBodyTests"
            timeout: 15
          - name: "UI Tests"
            filter: "LogYourBodyUITests"
            timeout: 25
          - name: "Snapshot Tests"
            filter: "LogYourBodyUITests/SnapshotTests"
            timeout: 20
    
    name: ${{ matrix.test-type.name }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
        setup-ruby: 'false'
    
    - name: Restore test build
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/DerivedData/Build/Products
          apps/ios/test-runner.xctestrun
        key: ${{ needs.build-for-testing.outputs.cache-key }}
        fail-on-cache-miss: true
    
    - name: Run ${{ matrix.test-type.name }}
      timeout-minutes: ${{ matrix.test-type.timeout }}
      run: |
        cd apps/ios
        
        # Run tests without building using the test runner
        xcodebuild test-without-building \
          -xctestrun test-runner.xctestrun \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -only-testing:${{ matrix.test-type.filter }} \
          -resultBundlePath ${{ matrix.test-type.name }}.xcresult \
          | xcbeautify --renderer github-actions
    
    - name: Process test results
      if: always()
      run: |
        cd apps/ios
        
        RESULT_BUNDLE="${{ matrix.test-type.name }}.xcresult"
        if [ -d "$RESULT_BUNDLE" ]; then
          # Extract test summary
          xcrun xcresulttool get --path "$RESULT_BUNDLE" --format json > test-summary.json
          
          # Parse and display results
          TESTS_COUNT=$(jq '.metrics.testsCount.value // 0' test-summary.json)
          TESTS_FAILED=$(jq '.metrics.testsFailedCount.value // 0' test-summary.json)
          
          echo "### ${{ matrix.test-type.name }} Results" >> $GITHUB_STEP_SUMMARY
          echo "- Total Tests: $TESTS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Failed Tests: $TESTS_FAILED" >> $GITHUB_STEP_SUMMARY
          
          if [ "$TESTS_FAILED" -gt 0 ]; then
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.test-type.name }}-results
        path: |
          apps/ios/${{ matrix.test-type.name }}.xcresult
          apps/ios/test-summary.json
        retention-days: 3

  # Memory profiling with sanitizers
  memory-profiling:
    needs: [lint, build-for-testing]
    runs-on: macos-14
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - type: address
            name: "Address Sanitizer"
          - type: thread
            name: "Thread Sanitizer"
    
    name: ${{ matrix.sanitizer.name }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Build with ${{ matrix.sanitizer.name }}
      run: |
        cd apps/ios
        
        # Build with sanitizer enabled
        bundle exec fastlane test_sanitizers \
          sanitizer:${{ matrix.sanitizer.type }} \
          skip_build:false \
          test_without_building:false
    
    - name: Analyze sanitizer results
      if: always()
      run: |
        cd apps/ios
        
        echo "### ${{ matrix.sanitizer.name }} Results" >> $GITHUB_STEP_SUMMARY
        
        # Look for sanitizer output in logs
        if [ -f "sanitizer_output/test_output.log" ]; then
          ISSUES=$(grep -c "runtime error\|data race\|leak" sanitizer_output/test_output.log || echo "0")
          echo "- Issues Found: $ISSUES" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ISSUES" -gt 0 ]; then
            echo "- Status: ⚠️ Issues Detected" >> $GITHUB_STEP_SUMMARY
            # Extract first few issues for summary
            echo "#### Sample Issues:" >> $GITHUB_STEP_SUMMARY
            grep -m 5 "runtime error\|data race\|leak" sanitizer_output/test_output.log >> $GITHUB_STEP_SUMMARY || true
          else
            echo "- Status: ✅ Clean" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Upload sanitizer results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.sanitizer.name }}-results
        path: apps/ios/sanitizer_output/
        retention-days: 3

  # Performance profiling
  performance-profiling:
    needs: [lint, build-for-testing]
    runs-on: macos-14
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Restore test build
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/DerivedData/Build/Products
          apps/ios/test-runner.xctestrun
        key: ${{ needs.build-for-testing.outputs.cache-key }}
        fail-on-cache-miss: true
    
    - name: Run Performance Tests
      run: |
        cd apps/ios
        
        # Run performance tests
        xcodebuild test-without-building \
          -xctestrun test-runner.xctestrun \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -only-testing:LogYourBodyTests/PerformanceTests \
          -enablePerformanceTestsDiagnostics YES \
          -resultBundlePath performance.xcresult \
          | xcbeautify
    
    - name: Analyze performance metrics
      if: always()
      run: |
        cd apps/ios
        
        if [ -d "performance.xcresult" ]; then
          # Extract performance metrics
          xcrun xcresulttool get --path performance.xcresult --format json > perf-results.json
          
          echo "### Performance Test Results" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display key metrics
          jq -r '.metrics.performanceMetrics[] | 
            "- \(.identifier): \(.measurements | map(.value) | add/length) \(.unit)"' perf-results.json >> $GITHUB_STEP_SUMMARY || \
            echo "- No performance metrics found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-profiling-results
        path: |
          apps/ios/performance.xcresult
          apps/ios/perf-results.json
        retention-days: 3

  # Code coverage analysis
  code-coverage:
    needs: [test-suite]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: '*Tests-results'
        path: test-results
    
    - name: Aggregate coverage data
      run: |
        echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "Coverage analysis would be performed here on macOS runner with access to xcresult bundles" >> $GITHUB_STEP_SUMMARY
        
        # Note: Actual coverage extraction requires macOS with Xcode tools
        # This is a placeholder for the aggregation logic

  # Summary job that other workflows can depend on
  confidence-summary:
    if: always()
    needs: [lint, test-suite, memory-profiling, performance-profiling]
    runs-on: ubuntu-latest
    steps:
    - name: Check all jobs status
      run: |
        echo "## 🛡️ iOS Confidence Loop Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Function to check job status
        check_status() {
          local job_name=$1
          local job_result=$2
          local is_required=$3
          
          if [[ "$job_result" == "success" ]]; then
            echo "- ✅ $job_name: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "$job_result" == "skipped" ]]; then
            echo "- ⏭️ $job_name: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [[ "$is_required" == "true" ]]; then
            echo "- ❌ $job_name: Failed (Required)" >> $GITHUB_STEP_SUMMARY
            return 1
          else
            echo "- ⚠️ $job_name: Failed (Optional)" >> $GITHUB_STEP_SUMMARY
          fi
          return 0
        }
        
        # Check required jobs
        FAILED=0
        check_status "Lint" "${{ needs.lint.result }}" "true" || FAILED=1
        
        # Test suite results are handled by the matrix
        echo "- 🧪 Test Suite: Check individual test results above" >> $GITHUB_STEP_SUMMARY
        
        # Optional jobs
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Optional Checks" >> $GITHUB_STEP_SUMMARY
        check_status "Memory Profiling" "${{ needs.memory-profiling.result }}" "false"
        check_status "Performance Profiling" "${{ needs.performance-profiling.result }}" "false"
        
        if [[ $FAILED -eq 1 ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Required checks failed**" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All required checks passed**" >> $GITHUB_STEP_SUMMARY
        fi