name: iOS Confidence Loop

on:
  push:
    branches: [preview]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-confidence-loop.yml'
  schedule:
    # Run at 2 AM PT (9 AM UTC)
    - cron: '0 9 * * *'
  workflow_dispatch:
  workflow_call:

jobs:
  # Setup job that prepares dependencies for other jobs
  setup:
    runs-on: macos-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-ios-${{ hashFiles('**/Package.resolved', '**/project.pbxproj', '**/Gemfile.lock') }}" >> $GITHUB_OUTPUT
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Install Dependencies
      run: |
        cd apps/ios
        
        # Install brew dependencies
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        if ! command -v xcbeautify &> /dev/null; then
          brew install xcbeautify
        fi
        
        # Install Ruby dependencies
        gem install bundler:2.4.10
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        
        # Create config files
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig

  # Lint job runs in parallel
  lint:
    needs: setup
    runs-on: macos-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        # Check if swiftlint is available, install if not
        if ! command -v swiftlint &> /dev/null; then
          echo "SwiftLint not found in cache, installing..."
          brew install swiftlint
        fi
        
        swiftlint lint --strict --reporter github-actions-logging

  # Build job - builds once for all test jobs
  build:
    needs: setup
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: apps/ios/build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Create Config Files
      run: |
        cd apps/ios
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Build iOS App
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        # Get processor count for optimal parallelism
        WORKERS=$(sysctl -n hw.ncpu)
        echo "Building with $WORKERS workers"
        
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          clean build-for-testing \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO \
          -parallel-testing-enabled YES \
          -parallel-testing-worker-count $WORKERS \
          -quiet | xcbeautify --renderer github-actions

  # Full UI and integration tests
  test:
    needs: [setup, build]
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Restore Build Artifacts
      uses: actions/cache@v4
      with:
        path: apps/ios/build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Create Config Files
      run: |
        cd apps/ios
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Run Tests
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        # Get processor count for optimal parallelism
        WORKERS=$(sysctl -n hw.ncpu)
        echo "Running tests with $WORKERS workers"
        
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          test-without-building \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -parallel-testing-enabled YES \
          -parallel-testing-worker-count $WORKERS \
          -quiet | xcbeautify --renderer github-actions
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-test-results
        path: |
          apps/ios/build/Logs/Test/*.xcresult
        retention-days: 7

  # Sanitizer test job - runs in parallel with normal tests
  test-sanitizers:
    needs: [setup, build]
    runs-on: macos-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Restore Build Artifacts
      uses: actions/cache@v4
      with:
        path: apps/ios/build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Create Config Files
      run: |
        cd apps/ios
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Run Tests with Sanitizers
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        # Get processor count for optimal parallelism
        WORKERS=$(sysctl -n hw.ncpu)
        echo "Running sanitizer tests with $WORKERS workers"
        
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          test-without-building \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -enableAddressSanitizer YES \
          -enableThreadSanitizer NO \
          -parallel-testing-enabled YES \
          -parallel-testing-worker-count $WORKERS \
          -quiet | xcbeautify --renderer github-actions || true
    
    - name: Upload sanitizer results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-sanitizer-results
        path: |
          apps/ios/build/Logs/Test/*.xcresult
        retention-days: 7

  # Snapshot tests for UI regression
  snapshot-tests:
    needs: [setup, build]
    runs-on: macos-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Restore Build Artifacts
      uses: actions/cache@v4
      with:
        path: apps/ios/build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Create Config Files
      run: |
        cd apps/ios
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Run Snapshot Tests
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          -only-testing:LogYourBodyUITests/SnapshotTests \
          test-without-building \
          -quiet | xcbeautify --renderer github-actions
    
    - name: Upload snapshot results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-snapshot-results
        path: |
          apps/ios/build/Logs/Test/*.xcresult
          apps/ios/__Snapshots__/
        retention-days: 7

  # Performance profiling
  performance-tests:
    needs: [setup, build]
    runs-on: macos-latest
    timeout-minutes: 25
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Restore Dependencies Cache
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/vendor/bundle
          /opt/homebrew
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-ios-
    
    - name: Restore Build Artifacts
      uses: actions/cache@v4
      with:
        path: apps/ios/build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Create Config Files
      run: |
        cd apps/ios
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Run Performance Tests
      run: |
        cd apps/ios
        # Add homebrew bin to PATH for cached tools
        export PATH="/opt/homebrew/bin:$PATH"
        
        # Run with Time Profiler
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          -only-testing:LogYourBodyTests/PerformanceTests \
          test-without-building \
          -enablePerformanceTestsDiagnostics YES \
          -quiet | xcbeautify --renderer github-actions
    
    - name: Analyze performance results
      run: |
        cd apps/ios
        echo "📊 Performance Test Results:"
        # Extract and analyze performance metrics
        find build/Logs/Test -name "*.xcresult" -exec xcrun xcresulttool get --path {} --format json \; | \
          jq -r '.metrics.testsMetrics[] | select(.identifier | contains("performance")) | 
          "\(.identifier): \(.measurements[].value) \(.measurements[].unit)"' || true
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-performance-results
        path: |
          apps/ios/build/Logs/Test/*.xcresult
        retention-days: 7

  # Status check job that other workflows can depend on
  ios-confidence-status:
    if: always()
    needs: [lint, build, test, test-sanitizers, snapshot-tests, performance-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Check all jobs status
      run: |
        echo "🛡️ iOS Confidence Loop Results:"
        echo "  Lint: ${{ needs.lint.result }}"
        echo "  Build: ${{ needs.build.result }}"
        echo "  Tests: ${{ needs.test.result }}"
        echo "  Sanitizers: ${{ needs.test-sanitizers.result }}"
        echo "  Snapshots: ${{ needs.snapshot-tests.result }}"
        echo "  Performance: ${{ needs.performance-tests.result }}"
        
        # Core jobs must pass
        if [[ "${{ needs.lint.result }}" != "success" || 
              "${{ needs.build.result }}" != "success" || 
              "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Core jobs failed"
          exit 1
        fi
        
        # Optional jobs can fail with warning (only check if they ran)
        if [[ "${{ needs.test-sanitizers.result }}" == "failure" ]]; then
          echo "⚠️ Sanitizer tests failed - memory issues detected"
        fi
        if [[ "${{ needs.snapshot-tests.result }}" == "failure" ]]; then
          echo "⚠️ Snapshot tests failed - UI regressions detected"
        fi
        if [[ "${{ needs.performance-tests.result }}" == "failure" ]]; then
          echo "⚠️ Performance tests failed - performance regressions detected"
        fi
        
        # Note about scheduled jobs
        if [[ "${{ github.event_name }}" != "schedule" ]]; then
          echo "ℹ️ Heavy test jobs (sanitizers, snapshots, performance) only run on schedule"
        fi
        
        echo "✅ All core jobs passed successfully"

  # Deploy to TestFlight from preview branch
  deploy-testflight:
    needs: [build, test]
    if: github.ref == 'refs/heads/preview' && github.event_name == 'push'
    runs-on: macos-latest
    environment:
      name: Preview
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
    
    - name: Install dependencies
      run: |
        cd apps/ios
        gem install bundler:2.4.10
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    - name: Import Code Signing Certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}
    
    - name: Download Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
    
    - name: Setup App Store Connect API Key
      run: |
        cd apps/ios
        # Use printf to avoid issues with special characters
        printf '%s' '${{ secrets.ASC_API_KEY_JSON }}' > app_store_connect_api_key.json
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/app_store_connect_api_key.json" >> $GITHUB_ENV
    
    - name: Set unique build number
      run: |
        cd apps/ios
        # Use timestamp for unique build number
        BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" LogYourBody/Info.plist
        echo "Build number set to: $BUILD_NUMBER"
    
    - name: Build and Deploy to TestFlight
      run: |
        cd apps/ios
        bundle exec fastlane beta
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "180"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "10"
    
    - name: Cleanup API Key
      if: always()
      run: |
        cd apps/ios
        rm -f app_store_connect_api_key.json