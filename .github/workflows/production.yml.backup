name: Vercel Production Deployment

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm test

      # Check for migration changes
      - name: Check for migration changes
        id: migration-check
        run: |
          # Get the merge base to properly detect changes
          MERGE_BASE=$(git merge-base HEAD origin/preview || git merge-base HEAD origin/main)
          if git diff --quiet $MERGE_BASE HEAD -- supabase/migrations/; then
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "No migration changes detected"
          else
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "⚠️ PRODUCTION migration changes detected:"
            git diff --name-only $MERGE_BASE HEAD -- supabase/migrations/
          fi

      # Run database migrations if needed
      - name: Setup Supabase CLI
        if: steps.migration-check.outputs.has-migrations == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run PRODUCTION database migrations
        if: steps.migration-check.outputs.has-migrations == 'true'
        run: |
          echo "⚠️ Running PRODUCTION database migrations..."
          echo "This is a critical operation. Migrations will be applied to the production database."
          supabase db push --db-url "${{ secrets.PROD_DATABASE_URL }}"
          echo "✅ Production migrations completed"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify production migrations
        if: steps.migration-check.outputs.has-migrations == 'true'
        run: |
          echo "Verifying production migration status..."
          supabase db remote list --db-url "${{ secrets.PROD_DATABASE_URL }}" || true
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: |
          # Export environment variables from the downloaded .env file
          set -a
          source .vercel/.env.production.local || true
          set +a
          
          # Run the build
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Production
        id: deploy
        run: |
          echo "Deploying prebuilt artifacts to Production..."
          
          # Deploy to production
          if ! vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deploy.output 2>&1; then
            echo "❌ Deployment command failed"
            echo "Error output:"
            cat deploy.output
            exit 1
          fi
          
          # Extract deployment URL
          DEPLOYMENT_OUTPUT=$(cat deploy.output)
          echo "Raw output: $DEPLOYMENT_OUTPUT"
          
          # For production, we might get the production domain
          DEPLOYMENT_URL=""
          
          # Pattern 1: Direct URL output (might be production domain)
          if [[ "$DEPLOYMENT_OUTPUT" =~ https://[^[:space:]]+ ]]; then
            DEPLOYMENT_URL="${BASH_REMATCH[0]}"
          # Pattern 2: "Inspect: URL" format
          elif [[ "$DEPLOYMENT_OUTPUT" =~ Inspect:[[:space:]]+https://[^[:space:]]+ ]]; then
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[^[:space:]]+' | head -1)
          fi
          
          if [[ -n "$DEPLOYMENT_URL" ]]; then
            echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "✅ Production deployment successful: $DEPLOYMENT_URL"
            
            # Verify deployment status
            echo "Verifying deployment..."
            if vercel inspect "$DEPLOYMENT_URL" --token=${{ secrets.VERCEL_TOKEN }} > inspect.output 2>&1; then
              if grep -q "State.*Ready" inspect.output; then
                echo "✅ Deployment verified as ready"
              else
                echo "⚠️ Deployment state:"
                grep "State" inspect.output || echo "State not found"
              fi
            fi
          else
            echo "❌ Could not extract deployment URL from output"
            echo "Full output:"
            cat deploy.output
            exit 1
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: 'https://logyourbody.vercel.app',
              description: 'Deployed to production'
            });