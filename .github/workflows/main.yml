name: Main CI/CD

on:
  push:
    branches: [main, preview, dev]
  pull_request:
    branches: [main, preview, dev]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Build, test and deploy job
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - run: npm ci
      - run: npm install -g vercel
      - run: npm run typecheck
      - run: npm run lint
        continue-on-error: true
      - run: npm test
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      # Deploy to Vercel if not a PR
      - name: Deploy to Vercel
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Link to Vercel project
          vercel link --yes --token=$VERCEL_TOKEN
          
          # Pull environment variables
          vercel env pull .env.production.local --token=$VERCEL_TOKEN
          
          # Deploy and let Vercel handle the build
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            vercel --prod --token=$VERCEL_TOKEN --yes
          else
            vercel --token=$VERCEL_TOKEN --yes
          fi

  # Database migrations - only when migration files change
  migrate:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      # Check if migrations changed
      - name: Check for migration changes
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "supabase/migrations/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      # Run migrations if needed
      - name: Run migrations
        if: steps.check.outputs.changed == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Apply migrations
        if: steps.check.outputs.changed == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Set project ref based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            PROJECT_REF="${{ secrets.SUPABASE_PROJECT_REF_PROD }}"
          else
            PROJECT_REF="${{ secrets.SUPABASE_PROJECT_REF_DEV }}"
          fi
          
          supabase link --project-ref $PROJECT_REF --password $SUPABASE_DB_PASSWORD
          supabase db push --password $SUPABASE_DB_PASSWORD

  # Auto PR creation for dev -> preview -> main flow
  create-pr:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/preview')
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create PR
        id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            TARGET="preview"
            TITLE="ðŸš€ Deploy to Preview"
            AUTO_MERGE="true"
          else
            TARGET="main"
            TITLE="ðŸŽ¯ Deploy to Production"
            AUTO_MERGE="false"
          fi
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base $TARGET --head ${{ github.ref_name }} --json number --jq '.[0].number' || echo "")
          
          if [ -z "$EXISTING_PR" ]; then
            PR_URL=$(gh pr create \
              --title "$TITLE" \
              --body "Auto-generated PR from ${{ github.ref_name }} to $TARGET" \
              --base $TARGET \
              --head ${{ github.ref_name }})
            PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]\+$')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "auto_merge=$AUTO_MERGE" >> $GITHUB_OUTPUT
          else
            echo "PR already exists: #$EXISTING_PR"
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "auto_merge=$AUTO_MERGE" >> $GITHUB_OUTPUT
          fi
      
      - name: Enable auto-merge for dev->preview
        if: steps.pr.outputs.auto_merge == 'true' && steps.pr.outputs.pr_number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge --auto --merge "${{ steps.pr.outputs.pr_number }}"
          echo "âœ… Enabled auto-merge for PR #${{ steps.pr.outputs.pr_number }}"

  # Auto-merge dependabot PRs
  auto-merge-dependabot:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    
    steps:
      - name: Auto-merge Dependabot PRs
        run: gh pr merge --auto --merge "${{ github.event.pull_request.html_url }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}