name: Test AI Triage

on:
  workflow_dispatch:
    inputs:
      issue_title:
        description: 'Test issue title'
        required: true
        default: 'Refactor authentication module to use dependency injection'
      issue_body:
        description: 'Test issue body'
        required: true
        default: 'The current auth module has tight coupling. We should refactor it to use DI for better testability.'

jobs:
  test-triage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install anthropic PyGithub PyYAML

      - name: Test triage logic
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > test_triage.py << 'EOF'
          import sys
          sys.path.append('.')
          from scripts.ai_issue_triage import IssueTriager
          
          # Test with sample data
          triager = IssueTriager(
              github_token="dummy",  # Not needed for test
              anthropic_api_key=os.environ.get('ANTHROPIC_API_KEY', 'dummy'),
              config_path='.github/ai-triage-config.yml'
          )
          
          # Test different scenarios
          test_cases = [
              {
                  "title": "${{ github.event.inputs.issue_title }}",
                  "body": "${{ github.event.inputs.issue_body }}"
              },
              {
                  "title": "Implement user dashboard with charts",
                  "body": "Create a new dashboard component that displays user statistics with interactive charts."
              },
              {
                  "title": "Debug memory leak in production servers",
                  "body": "We're seeing increasing memory usage over time. Need to investigate and fix the leak."
              }
          ]
          
          for i, test in enumerate(test_cases):
              print(f"\n{'='*60}")
              print(f"Test Case {i+1}: {test['title']}")
              print(f"{'='*60}")
              
              analysis = triager.analyze_issue(test['title'], test['body'])
              print(f"\nScores: {analysis['scores']}")
              print(f"Recommended: {analysis['recommended_tool']}")
              
              if 'ai_analysis' in analysis:
                  print(f"\nAI Analysis:")
                  print(f"  Confidence: {analysis['ai_analysis'].get('confidence', 'N/A')}")
                  print(f"  Reasoning: {analysis['ai_analysis'].get('reasoning', 'N/A')}")
          EOF
          
          python test_triage.py

      - name: Display results
        run: |
          echo "Test completed. Check the logs above for triage results."