name: iOS Rapid Loop

on:
  push:
    branches: [dev]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-rapid-loop.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rapid-checks:
    name: Rapid Checks
    runs-on: macos-14
    timeout-minutes: 15
    outputs:
      short_sha: ${{ steps.build-info.outputs.short_sha }}
      timestamp: ${{ steps.build-info.outputs.timestamp }}
      build_number: ${{ steps.build-info.outputs.build_number }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS build environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        setup-ruby: 'true'
        create-config-files: 'true'
    
    - name: Cache Swift packages and DerivedData
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/.build
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-xcode-16.1-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-spm-xcode-16.1-
          ${{ runner.os }}-spm-
    
    - name: Generate build info
      id: build-info
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "build_number=$TIMESTAMP" >> $GITHUB_OUTPUT
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        bundle exec fastlane lint
    
    - name: Quick build check
      run: |
        cd apps/ios
        # Use Fastlane for consistent build process with automatic log collation
        bundle exec fastlane build_check

  deploy-alpha:
    name: Deploy TestFlight Alpha
    needs: rapid-checks
    if: needs.rapid-checks.result == 'success'
    runs-on: macos-14
    timeout-minutes: 10
    environment:
      name: development
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Configure OpenSSL for Curve Compatibility
      run: |
        # Ensure we're using the latest OpenSSL with proper curve support
        brew upgrade openssl || brew install openssl
        
        # Configure OpenSSL to use widely supported curves
        export OPENSSL_CONF=/dev/null
        
        # Set environment variables for proper TLS configuration
        echo "RUBY_OPENSSL_CONF=/dev/null" >> $GITHUB_ENV
        echo "SSL_CERT_FILE=$(brew --prefix)/etc/ca-certificates/cert.pem" >> $GITHUB_ENV
        
    - name: Setup Match Authentication
      run: |
        cd apps/ios
        # Create API key file from secret
        mkdir -p fastlane
        cat > fastlane/api_key.json << 'EOFKEY'
        {
          "key_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}",
          "issuer_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}",
          "key": "${{ secrets.APP_STORE_CONNECT_API_KEY }}",
          "duration": 1200,
          "in_house": false
        }
        EOFKEY
        
        # Set API key path for subsequent steps
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/fastlane/api_key.json" >> $GITHUB_ENV
      
      
    - name: Sync Certificates with Match
      id: match
      uses: ./.github/actions/sync-match
      with:
        match_password: ${{ secrets.MATCH_PASSWORD }}
        match_git_url: ${{ secrets.MATCH_GIT_URL }}
        match_git_basic: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        match_git_branch: ${{ secrets.MATCH_GIT_BRANCH || 'main' }}
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    
    - name: Validate Provisioning Profile
      run: |
        cd apps/ios
        echo "🔍 Validating provisioning profile capabilities..."
        bundle exec fastlane validate_profile || echo "Validation failed - continuing anyway to see build error"
        
    - name: Set Environment Variables for Build
      run: |
        cd apps/ios
        echo "APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_APP_ID=${{ secrets.APP_STORE_APP_ID }}" >> $GITHUB_ENV
    
    - name: Build and upload to TestFlight
      run: |
        cd apps/ios
        
        # Create release notes
        cat > release_notes.txt << EOF
        Alpha Build ${{ needs.rapid-checks.outputs.timestamp }}
        Commit: ${{ needs.rapid-checks.outputs.short_sha }}
        
        This is an automated alpha build from the dev branch.
        For internal testing only.
        EOF
        
        # Export provisioning profile info if available
        if [ -n "${{ steps.match.outputs.profile_uuid }}" ]; then
          export IOS_PROVISIONING_PROFILE_UUID="${{ steps.match.outputs.profile_uuid }}"
          export IOS_PROVISIONING_PROFILE_NAME="${{ steps.match.outputs.profile_name }}"
          echo "Using provisioning profile: $IOS_PROVISIONING_PROFILE_NAME ($IOS_PROVISIONING_PROFILE_UUID)"
        fi
        
        # Use Fastlane alpha lane with build number from rapid-checks
        bundle exec fastlane alpha \
          build_number:"${{ needs.rapid-checks.outputs.build_number }}" \
          release_notes_file:release_notes.txt \
          groups:"Internal Testers"
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "180"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "10"
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f release_notes.txt
        # Clean up the App Store Connect key file
        if [ -n "$ASC_KEY_FILE" ] && [ -f "$ASC_KEY_FILE" ]; then
          rm -f "$ASC_KEY_FILE"
        fi
        # Clean up any other temp API key files
        rm -f /tmp/AuthKey_*.p8 2>/dev/null || true
        rm -f /var/folders/*/T/tmp.* 2>/dev/null || true
    
    - name: Post deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const timestamp = '${{ needs.rapid-checks.outputs.timestamp }}';
          const shortSha = '${{ needs.rapid-checks.outputs.short_sha }}';
          
          const body = `📱 **iOS Alpha Deployed to TestFlight!**
          
          - **Build**: ${timestamp}
          - **Commit**: ${shortSha}
          - **Time**: < 15 minutes ⚡
          - **TestFlight**: Available for internal testers
          
          This is an alpha build for rapid testing. Full tests run nightly on preview.`;
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: body
          });
