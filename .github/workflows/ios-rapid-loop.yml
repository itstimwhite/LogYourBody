name: iOS Rapid Loop

on:
  push:
    branches: [dev]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-rapid-loop.yml'
      - '.github/workflows/ios-testflight-deploy.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rapid-checks:
    name: Rapid Checks
    runs-on: macos-14
    timeout-minutes: 15
    outputs:
      short_sha: ${{ steps.build-info.outputs.short_sha }}
      timestamp: ${{ steps.build-info.outputs.timestamp }}
      build_number: ${{ steps.build-info.outputs.build_number }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS build environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        setup-ruby: 'true'
        create-config-files: 'true'
    
    - name: Cache Swift packages and DerivedData
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/.build
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-xcode-16.1-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-spm-xcode-16.1-
          ${{ runner.os }}-spm-
    
    - name: Generate build info
      id: build-info
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "build_number=$TIMESTAMP" >> $GITHUB_OUTPUT
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        bundle exec fastlane lint
    
    - name: Quick build check
      run: |
        cd apps/ios
        # Use Fastlane for consistent build process with automatic log collation
        bundle exec fastlane build_check

  build-release:
    name: Build Release
    needs: rapid-checks
    if: needs.rapid-checks.result == 'success'
    runs-on: macos-14
    timeout-minutes: 20
    outputs:
      artifact_name: ${{ steps.artifact-name.outputs.name }}
      version_name: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Setup App Store Connect Authentication
      run: |
        cd apps/ios
        # Create API key file from secret
        mkdir -p fastlane
        cat > fastlane/api_key.json << 'EOFKEY'
        {
          "key_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}",
          "issuer_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}",
          "key": "${{ secrets.APP_STORE_CONNECT_API_KEY }}",
          "duration": 1200,
          "in_house": false
        }
        EOFKEY
        
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/fastlane/api_key.json" >> $GITHUB_ENV
    
    - name: Sync Certificates with Match
      uses: ./.github/actions/sync-match
      with:
        match_password: ${{ secrets.MATCH_PASSWORD }}
        match_git_url: ${{ secrets.MATCH_GIT_URL }}
        match_git_basic: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        match_git_branch: 'main'
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    
    - name: Get version info
      id: version
      run: |
        cd apps/ios
        VERSION=$(bundle exec fastlane run get_version_number | grep "Result:" | awk '{print $2}')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Build app
      run: |
        cd apps/ios
        
        # Build the app using the build lane
        bundle exec fastlane build \
          scheme:"LogYourBody" \
          configuration:"Release" \
          export_method:"app-store" \
          build_number:"${{ needs.rapid-checks.outputs.build_number }}" \
          output_directory:"./build" \
          output_name:"LogYourBody"
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "180"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "10"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      id: artifact
      with:
        name: ios-build-${{ needs.rapid-checks.outputs.build_number }}
        path: apps/ios/build/*.ipa
        retention-days: 7
    
    - name: Set artifact output
      id: artifact-name
      run: |
        echo "name=ios-build-${{ needs.rapid-checks.outputs.build_number }}" >> $GITHUB_OUTPUT
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f fastlane/api_key.json
        rm -f /tmp/AuthKey_*.p8 2>/dev/null || true
  
  deploy-testflight:
    name: Deploy to TestFlight
    needs: [rapid-checks, build-release]
    if: needs.build-release.result == 'success'
    uses: ./.github/workflows/ios-testflight-deploy.yml
    with:
      distribution_group: alpha
      build_number: ${{ needs.rapid-checks.outputs.build_number }}
      version_name: ${{ needs.build-release.outputs.version_name }}
      artifact_name: ${{ needs.build-release.outputs.artifact_name }}
      environment: development
      release_notes: |
        Alpha Build ${{ needs.rapid-checks.outputs.timestamp }}
        Commit: ${{ needs.rapid-checks.outputs.short_sha }}
        
        This is an automated alpha build from the dev branch.
        For internal testing only.
    secrets: inherit