name: iOS Rapid Loop

on:
  push:
    branches: [dev]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-rapid-loop.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rapid-checks:
    name: Rapid Checks
    runs-on: macos-14
    timeout-minutes: 15
    outputs:
      short_sha: ${{ steps.build-info.outputs.short_sha }}
      timestamp: ${{ steps.build-info.outputs.timestamp }}
      build_number: ${{ steps.build-info.outputs.build_number }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS build environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        setup-ruby: 'true'
        create-config-files: 'true'
    
    - name: Cache Swift packages and DerivedData
      uses: actions/cache@v4
      with:
        path: |
          apps/ios/.build
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-xcode-16.1-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-spm-xcode-16.1-
          ${{ runner.os }}-spm-
    
    - name: Generate build info
      id: build-info
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "build_number=$TIMESTAMP" >> $GITHUB_OUTPUT
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Validate signing configuration
      run: |
        cd apps/ios
        
        # Quick validation of signing setup using Fastlane
        bundle exec fastlane run validate_project 2>&1 | tee validation.log || true
        
        # Check for common signing issues
        if grep -E "provisioning|certificate|signing|codesign" validation.log | grep -E "error|Error|ERROR"; then
          echo "::warning::Potential signing issues detected - check logs"
        fi
    
    - name: Quick build check
      run: |
        cd apps/ios
        
        # Just do a quick build check without tests for rapid feedback
        # This ensures the code compiles but skips time-consuming tests
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -configuration Debug \
          build \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO \
          -quiet | xcbeautify --renderer github-actions || true

  deploy-alpha:
    name: Deploy TestFlight Alpha
    needs: rapid-checks
    if: needs.rapid-checks.result == 'success'
    runs-on: macos-14
    timeout-minutes: 10
    environment:
      name: development
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'
    
    - name: Cache Ruby dependencies
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
    
    - name: Install dependencies
      run: |
        cd apps/ios
        gem install bundler:2.4.10
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    - name: Import Code Signing Certificates
      uses: apple-actions/import-codesign-certs@v5
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}
        keychain-password: ${{ secrets.IOS_P12_PASSWORD }}
    
    - name: Download Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        # Use printf to handle multi-line base64 correctly
        printf '%s' "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > provision.mobileprovision
        
        # Extract UUID and install with proper name
        uuid=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i provision.mobileprovision))
        cp provision.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${uuid}.mobileprovision
        
        echo "PROVISIONING_PROFILE_UUID=${uuid}" >> $GITHUB_ENV
        
        # Validate provisioning profile
        security cms -D -i provision.mobileprovision > profile_info.plist
        app_id=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" profile_info.plist)
        team_id=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" profile_info.plist)
        
        # Mask sensitive information before any output
        echo "::add-mask::${app_id}"
        echo "::add-mask::${team_id}"
        echo "::add-mask::${uuid}"
        
        echo "Provisioning profile installed and validated successfully"
        
        # Check for required capabilities
        echo "Checking required capabilities..."
        capabilities_ok=true
        
        # Check for HealthKit
        if ! /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.healthkit" profile_info.plist &>/dev/null; then
          echo "::warning::Missing HealthKit capability"
          capabilities_ok=false
        fi
        
        # Check for App Groups
        if ! /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.security.application-groups:0" profile_info.plist &>/dev/null; then
          echo "::warning::Missing App Groups capability"
          capabilities_ok=false
        fi
        
        # Check for Associated Domains
        if ! /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.associated-domains" profile_info.plist &>/dev/null; then
          echo "::warning::Missing Associated Domains capability"
          capabilities_ok=false
        else
          echo "âœ“ Associated Domains found"
        fi
        
        # Check for Sign in with Apple
        if ! /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.applesignin" profile_info.plist &>/dev/null; then
          echo "::warning::Missing Sign in with Apple capability"
          capabilities_ok=false
        fi
        
        # Verify it matches our expected values
        if [[ ! "$app_id" =~ "LogYourBody.LogYourBody" ]]; then
          echo "::error::Provisioning profile app ID mismatch. Expected LogYourBody.LogYourBody, got ${app_id}"
          exit 1
        fi
        
        if [[ "$capabilities_ok" == "false" ]]; then
          echo "::error::Provisioning profile is missing required capabilities. Please regenerate the profile with all required entitlements."
          exit 1
        fi
        
        rm -f profile_info.plist
    
    - name: Setup App Store Connect API Key
      run: |
        cd apps/ios
        # Parse the JSON and set environment variables for Fastlane
        echo "APP_STORE_CONNECT_API_KEY_ID=$(echo '${{ secrets.ASC_API_KEY_JSON }}' | jq -r '.key_id')" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=$(echo '${{ secrets.ASC_API_KEY_JSON }}' | jq -r '.issuer_id')" >> $GITHUB_ENV
        
        # Write the key content to a secure temp file
        ASC_KEY_FILE=$(mktemp)
        echo '${{ secrets.ASC_API_KEY_JSON }}' | jq -r '.key' > "$ASC_KEY_FILE"
        echo "APP_STORE_CONNECT_API_KEY_PATH=$ASC_KEY_FILE" >> $GITHUB_ENV
        echo "ASC_KEY_FILE=$ASC_KEY_FILE" >> $GITHUB_ENV
    
    - name: Create config files
      run: |
        cd apps/ios
        
        # Create Supabase config
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        # Create LogYourBody config
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
    
    - name: Update version and build number
      run: |
        cd apps/ios
        
        # Use timestamp as build number
        BUILD_NUMBER="${{ needs.rapid-checks.outputs.build_number }}"
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" LogYourBody/Info.plist
        
        # Keep marketing version from Info.plist
        echo "Build number: $BUILD_NUMBER"
    
    - name: Build and upload to TestFlight
      run: |
        cd apps/ios
        
        # Create release notes with timestamp and SHA
        echo "Alpha Build ${{ needs.rapid-checks.outputs.timestamp }}" > release_notes.txt
        echo "Commit: ${{ needs.rapid-checks.outputs.short_sha }}" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "This is an automated alpha build from the dev branch." >> release_notes.txt
        echo "For internal testing only." >> release_notes.txt
        
        # Ensure we're in the right directory for Fastlane
        pwd
        ls -la
        
        # Use Fastlane to build and upload, capturing output for error detection
        bundle exec fastlane alpha \
          release_notes_file:release_notes.txt \
          groups:"Internal Testers" 2>&1 | tee fastlane.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|Error:|ERROR:|Failed|FAILED|EXPORT FAILED|No profiles|exportArchive.*failed" fastlane.log; then
          echo "::error::Build errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "180"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "10"
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f release_notes.txt
        # Clean up the App Store Connect key file
        if [ -n "$ASC_KEY_FILE" ] && [ -f "$ASC_KEY_FILE" ]; then
          rm -f "$ASC_KEY_FILE"
        fi
        # Clean up any other temp files
        rm -f /tmp/AuthKey_*.p8 2>/dev/null || true
    
    - name: Post deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const timestamp = '${{ needs.rapid-checks.outputs.timestamp }}';
          const shortSha = '${{ needs.rapid-checks.outputs.short_sha }}';
          
          const body = `ðŸ“± **iOS Alpha Deployed to TestFlight!**
          
          - **Build**: ${timestamp}
          - **Commit**: ${shortSha}
          - **Time**: < 15 minutes âš¡
          - **TestFlight**: Available for internal testers
          
          This is an alpha build for rapid testing. Full tests run nightly on preview.`;
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: body
          });