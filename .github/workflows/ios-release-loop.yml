name: iOS Release Loop

on:
  push:
    branches: [main]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-release-loop.yml'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - testflight
          - app_store
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-release:
    name: Validate Release
    runs-on: macos-14
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate preview checks
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍 Validating that preview branch is green..."
        
        # Get latest preview branch status
        PREVIEW_STATUS=$(gh api repos/${{ github.repository }}/commits/preview/status --jq '.state')
        
        if [[ "$PREVIEW_STATUS" != "success" ]]; then
          echo "❌ Preview branch checks are not passing"
          echo "Status: $PREVIEW_STATUS"
          exit 1
        fi
        
        echo "✅ Preview branch is green"
    
    - name: Extract version info
      id: version
      run: |
        cd apps/ios
        
        # Get marketing version
        VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" LogYourBody/Info.plist)
        
        # Generate build number with timestamp
        BUILD_NUMBER=$(date -u +%Y%m%d%H%M%S)
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
        echo "📦 Version: $VERSION"
        echo "🔢 Build: $BUILD_NUMBER"

  # Reuse artifacts from preview if possible
  check-existing-build:
    name: Check Existing Build
    needs: validate-release
    runs-on: ubuntu-latest
    outputs:
      has_artifact: ${{ steps.check.outputs.exists }}
      artifact_url: ${{ steps.check.outputs.url }}
    
    steps:
    - name: Check for existing preview artifact
      id: check
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Look for recent successful preview builds
        echo "🔍 Checking for reusable preview build..."
        
        # This is a placeholder - in production, you'd check artifact storage
        echo "exists=false" >> $GITHUB_OUTPUT
        echo "ℹ️ No reusable build found, will build fresh"

  build-release:
    name: Build Release
    needs: [validate-release, check-existing-build]
    if: needs.check-existing-build.outputs.has_artifact != 'true'
    runs-on: macos-14
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
        create-config-files: 'true'
    
    - name: Setup Match Authentication
      run: |
        cd apps/ios
        # Create API key file from secret
        mkdir -p fastlane
        cat > fastlane/api_key.json << 'EOF'
        {
          "key_id": "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}",
          "issuer_id": "${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}",
          "key": "${{ secrets.APP_STORE_CONNECT_API_KEY }}",
          "duration": 1200,
          "in_house": false
        }
        EOF
      
    - name: Sync Certificates with Match
      run: |
        cd apps/ios
        bundle exec fastlane match appstore --readonly
      env:
        APP_STORE_CONNECT_API_KEY_PATH: "./fastlane/api_key.json"
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: "https://${{ secrets.MATCH_GIT_TOKEN }}@github.com/itstimwhite/certificates.git"
        MATCH_KEYCHAIN_NAME: "login.keychain"
        MATCH_KEYCHAIN_PASSWORD: ""
    
    - name: Set Environment Variables for Build
      run: |
        cd apps/ios
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/fastlane/api_key.json" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_APP_ID=${{ secrets.APP_STORE_APP_ID }}" >> $GITHUB_ENV
    
    - name: Update version and build
      run: |
        cd apps/ios
        
        # Update build number
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ needs.validate-release.outputs.build_number }}" LogYourBody/Info.plist
        
        echo "📱 Building iOS app for release..."
    
    - name: Archive and export
      run: |
        cd apps/ios
        
        # Use Fastlane to build, capturing output for error detection
        bundle exec fastlane build_release 2>&1 | tee fastlane.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|duplicate|signing|Error:|ERROR:|Failed|FAILED" fastlane.log; then
          echo "::error::Build errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-release-build
        path: apps/ios/build/*.ipa
        retention-days: 3
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f app_store_connect_api_key.json

  deploy-testflight:
    name: Deploy to TestFlight
    needs: [validate-release, build-release]
    if: github.event.inputs.release_type != 'app_store'
    runs-on: macos-14
    timeout-minutes: 20
    environment:
      name: production-testflight
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ios-release-build
        path: apps/ios/build
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
    
    - name: Set Environment Variables for Build
      run: |
        cd apps/ios
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/fastlane/api_key.json" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_APP_ID=${{ secrets.APP_STORE_APP_ID }}" >> $GITHUB_ENV
    
    - name: Run Fastlane Precheck
      run: |
        cd apps/ios
        bundle exec fastlane precheck 2>&1 | tee precheck.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|duplicate|signing|Error:|ERROR:|Failed|FAILED" precheck.log; then
          echo "::error::Precheck errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
    
    - name: Upload to TestFlight
      run: |
        cd apps/ios
        
        # Create release notes
        cat > release_notes.txt << EOF
        Version ${{ needs.validate-release.outputs.version }}
        Build ${{ needs.validate-release.outputs.build_number }}
        
        This is a production release candidate.
        
        Changes:
        - All features tested in preview environment
        - Ready for production release
        
        Please test thoroughly before App Store submission.
        EOF
        
        # Upload to TestFlight
        bundle exec fastlane upload_testflight \
          ipa_path:build/*.ipa \
          groups:"Production Testers,Beta Testers" \
          changelog_file:release_notes.txt 2>&1 | tee upload.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|duplicate|signing|Error:|ERROR:|Failed|FAILED" upload.log; then
          echo "::error::Upload errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f app_store_connect_api_key.json
        rm -f release_notes.txt

  deploy-app-store:
    name: Deploy to App Store
    needs: [validate-release, build-release]
    if: github.event.inputs.release_type == 'app_store'
    runs-on: macos-14
    timeout-minutes: 30
    environment:
      name: production-app-store
      url: https://apps.apple.com/app/logyourbody
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ios-release-build
        path: apps/ios/build
    
    - name: Setup iOS Build Environment
      uses: ./.github/actions/setup-ios-build
      with:
        xcode-version: '16.1'
        working-directory: apps/ios
    
    - name: Set Environment Variables for Build
      run: |
        cd apps/ios
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/fastlane/api_key.json" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_APP_ID=${{ secrets.APP_STORE_APP_ID }}" >> $GITHUB_ENV
    
    - name: Run Fastlane Precheck
      run: |
        cd apps/ios
        bundle exec fastlane precheck 2>&1 | tee precheck.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|duplicate|signing|Error:|ERROR:|Failed|FAILED" precheck.log; then
          echo "::error::Precheck errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
    
    - name: Submit to App Store
      run: |
        cd apps/ios
        
        # Submit for review
        bundle exec fastlane submit_app_store \
          ipa_path:build/*.ipa \
          submit_for_review:false \
          automatic_release:false \
          phased_release:true 2>&1 | tee submit.log
        
        # Check for errors and surface them in the summary
        if grep -E "error:|duplicate|signing|Error:|ERROR:|Failed|FAILED" submit.log; then
          echo "::error::Submission errors detected - see highlighted lines above"
          exit 1
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
    
    - name: Cleanup
      if: always()
      run: |
        cd apps/ios
        rm -f app_store_connect_api_key.json

  create-release:
    name: Create Release
    needs: [validate-release, deploy-testflight, deploy-app-store]
    if: always() && (needs.deploy-testflight.result == 'success' || needs.deploy-app-store.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Tag release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="ios-v${{ needs.validate-release.outputs.version }}"
        
        # Create git tag
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "$VERSION" -m "iOS Release $VERSION
        
        Build: ${{ needs.validate-release.outputs.build_number }}
        Deployment: ${{ github.event.inputs.release_type || 'testflight' }}"
        
        # Push tag
        git push origin "$VERSION"
        
        echo "✅ Tagged release: $VERSION"
    
    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="ios-v${{ needs.validate-release.outputs.version }}"
        DEPLOYMENT_TYPE="${{ github.event.inputs.release_type || 'TestFlight' }}"
        
        # Generate release notes
        gh release create "$VERSION" \
          --title "iOS Release $VERSION" \
          --notes "## 📱 iOS Release $VERSION
          
          **Build Number**: ${{ needs.validate-release.outputs.build_number }}
          **Deployment**: $DEPLOYMENT_TYPE
          
          ### Changes
          This release includes all changes that have been tested in the preview environment.
          
          ### Deployment Info
          - **Environment**: Production
          - **Commit**: ${{ github.sha }}
          - **Deployed by**: @${{ github.actor }}
          - **Workflow**: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Installation
          $(if [[ "$DEPLOYMENT_TYPE" == "app_store" ]]; then
            echo "- **App Store**: Pending review"
          else
            echo "- **TestFlight**: Available for all testers"
          fi)
          
          ---
          *Automated release via three-loop CI/CD system*"