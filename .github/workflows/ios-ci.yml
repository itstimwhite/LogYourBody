name: iOS CI

on:
  push:
    branches: [main, preview, dev]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-ci.yml'
  pull_request:
    branches: [main, preview, dev]
    paths:
      - 'apps/ios/**'
      - '.github/workflows/ios-ci.yml'

jobs:
  lint-and-test:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Cache SwiftLint
      uses: actions/cache@v4
      id: swiftlint-cache
      with:
        path: /usr/local/bin/swiftlint
        key: ${{ runner.os }}-swiftlint-0.55.1
    
    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
    
    - name: Install SwiftLint
      if: steps.swiftlint-cache.outputs.cache-hit != 'true'
      run: brew install swiftlint
    
    - name: Install Ruby dependencies
      run: |
        cd apps/ios
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    - name: Setup iOS Dependencies
      run: |
        cd apps/ios
        # Create placeholder config files for CI
        echo "// CI Placeholder" > Supabase.xcconfig
        echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
        echo "SUPABASE_ANON_KEY = placeholder-key" >> Supabase.xcconfig
        
        echo "// CI Placeholder" > LogYourBody/Config.xcconfig
        echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
        
        # Install CocoaPods if needed
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi
    
    - name: Run SwiftLint
      run: |
        cd apps/ios
        bundle exec fastlane lint || swiftlint lint --strict --reporter github-actions-logging
    
    - name: Build iOS App
      run: |
        cd apps/ios
        bundle exec fastlane ci_build || \
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          clean build \
          CODE_SIGNING_REQUIRED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO
    
    - name: Run Tests
      run: |
        cd apps/ios
        bundle exec fastlane test || \
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          test \
          CODE_SIGNING_REQUIRED=NO
    
    - name: Check for Memory Leaks
      if: success()
      run: |
        cd apps/ios
        # Run with memory graph debugging
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          -derivedDataPath build \
          test \
          -enableAddressSanitizer YES \
          -enableThreadSanitizer NO \
          CODE_SIGNING_REQUIRED=NO || true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-test-results
        path: |
          apps/ios/build/Logs/Test/*.xcresult
        retention-days: 7

  # Deploy to TestFlight from preview branch
  deploy-testflight:
    needs: lint-and-test
    if: github.ref == 'refs/heads/preview' && github.event_name == 'push'
    runs-on: macos-latest
    environment:
      name: preview
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
    
    - name: Install dependencies
      run: |
        cd apps/ios
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi
    
    - name: Import Code Signing Certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}
    
    - name: Download Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
    
    - name: Setup App Store Connect API Key
      run: |
        cd apps/ios
        # Create the API key JSON file from the secret
        echo "${{ secrets.ASC_API_KEY_JSON }}" > app_store_connect_api_key.json
        # Set environment variable for Fastlane
        echo "APP_STORE_CONNECT_API_KEY_PATH=$(pwd)/app_store_connect_api_key.json" >> $GITHUB_ENV
    
    - name: Build and Deploy to TestFlight
      run: |
        cd apps/ios
        bundle exec fastlane beta
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        # The API key path is set in the previous step
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "180"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "10"
    
    - name: Cleanup API Key
      if: always()
      run: |
        cd apps/ios
        rm -f app_store_connect_api_key.json