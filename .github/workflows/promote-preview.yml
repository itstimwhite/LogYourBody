name: Promote to Preview

on:
  workflow_run:
    workflows: ["CI/CD Orchestrator"]
    branches: [dev]
    types: [completed]
  workflow_dispatch:
    inputs:
      skip_checks:
        description: 'Skip CI checks (use with caution)'
        required: false
        default: false
        type: boolean

jobs:
  check-eligibility:
    name: Check Promotion Eligibility
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      should_promote: ${{ steps.check.outputs.should_promote }}
      pr_number: ${{ steps.pr.outputs.number }}
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Check if dev is ahead of preview
      id: check
      run: |
        git fetch origin dev preview
        
        # Check if dev has new commits
        COMMITS_AHEAD=$(git rev-list --count origin/preview..origin/dev)
        echo "Commits ahead: $COMMITS_AHEAD"
        
        if [[ $COMMITS_AHEAD -gt 0 ]]; then
          echo "should_promote=true" >> $GITHUB_OUTPUT
        else
          echo "should_promote=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Preview is already up to date with dev"
        fi
    
    - name: Check for existing PR
      id: pr
      if: steps.check.outputs.should_promote == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if there's already an open PR
        PR_NUMBER=$(gh pr list --base preview --head dev --state open --json number -q '.[0].number')
        
        if [[ -n "$PR_NUMBER" ]]; then
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üìã Existing PR found: #$PR_NUMBER"
        else
          echo "number=" >> $GITHUB_OUTPUT
          echo "üìù No existing PR found"
        fi

  create-or-update-pr:
    name: Create or Update PR
    needs: check-eligibility
    if: needs.check-eligibility.outputs.should_promote == 'true'
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.pr.outputs.number }}
    
    steps:
    - uses: actions/checkout@v5
      with:
        ref: dev
        fetch-depth: 0
    
    - name: Generate PR body
      id: pr-body
      run: |
        # Get commit list
        git fetch origin preview
        
        # Generate changelog
        echo "## üöÄ Changes in this promotion" > pr_body.md
        echo "" >> pr_body.md
        echo "### Commits" >> pr_body.md
        git log origin/preview..HEAD --pretty=format:"- %s (%an)" >> pr_body.md
        echo "" >> pr_body.md
        echo "" >> pr_body.md
        
        # Add workflow run info
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "### CI Results" >> pr_body.md
          echo "- ‚úÖ All CI checks passed on dev branch" >> pr_body.md
          echo "- üîó [View workflow run](${{ github.event.workflow_run.html_url }})" >> pr_body.md
          echo "" >> pr_body.md
        fi
        
        echo "### Deployment Info" >> pr_body.md
        echo "- üåê **Web**: Will deploy to preview.logyourbody.com after merge" >> pr_body.md
        echo "- üì± **iOS**: Will deploy to TestFlight Beta after merge" >> pr_body.md
        echo "" >> pr_body.md
        echo "---" >> pr_body.md
        echo "This PR was automatically created by the promotion workflow." >> pr_body.md
        echo "Confidence tests will run nightly on the preview branch." >> pr_body.md
    
    - name: Create or update PR
      id: pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ -n "${{ needs.check-eligibility.outputs.pr_number }}" ]]; then
          # Update existing PR
          PR_NUMBER="${{ needs.check-eligibility.outputs.pr_number }}"
          gh pr edit $PR_NUMBER --body-file pr_body.md
          echo "‚úÖ Updated PR #$PR_NUMBER"
        else
          # Create new PR
          PR_URL=$(gh pr create \
            --base preview \
            --head dev \
            --title "üöÄ Deploy to Preview" \
            --body-file pr_body.md \
            --label "auto-promotion" \
            --assignee "@me")
          
          PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
          echo "‚úÖ Created PR #$PR_NUMBER"
        fi
        
        echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT

  auto-merge:
    name: Auto-merge PR
    needs: [check-eligibility, create-or-update-pr]
    if: needs.create-or-update-pr.outputs.pr_number != ''
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Wait for checks
      if: github.event.inputs.skip_checks != 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER="${{ needs.create-or-update-pr.outputs.pr_number }}"
        
        echo "‚è≥ Waiting for PR checks to complete..."
        
        # Wait up to 10 minutes for checks
        TIMEOUT=600
        ELAPSED=0
        INTERVAL=30
        
        while [[ $ELAPSED -lt $TIMEOUT ]]; do
          # Get check status
          STATUS=$(gh pr checks $PR_NUMBER --json state -q '.[] | select(.state != "PENDING") | .state' | sort -u)
          
          if [[ -z "$STATUS" ]]; then
            echo "‚è≥ Checks still pending..."
          elif [[ "$STATUS" == "SUCCESS" ]]; then
            echo "‚úÖ All checks passed!"
            break
          else
            echo "‚ùå Some checks failed"
            gh pr checks $PR_NUMBER
            exit 1
          fi
          
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        
        if [[ $ELAPSED -ge $TIMEOUT ]]; then
          echo "‚è∞ Timeout waiting for checks"
          exit 1
        fi
    
    - name: Auto-merge PR
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER="${{ needs.create-or-update-pr.outputs.pr_number }}"
        
        # Enable auto-merge
        gh pr merge $PR_NUMBER --merge --auto
        
        echo "‚úÖ Auto-merge enabled for PR #$PR_NUMBER"
        echo "The PR will be merged automatically once all checks pass."
    
    - name: Notify completion
      uses: actions/github-script@v7
      with:
        script: |
          const pr_number = ${{ needs.create-or-update-pr.outputs.pr_number }};
          
          // Add comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr_number,
            body: `ü§ñ **Auto-promotion initiated**
            
            This PR will be automatically merged once all checks pass.
            
            - ‚úÖ Dev branch CI passed
            - ‚è≥ Waiting for preview branch checks
            - üîÑ Auto-merge enabled
            
            @itstimwhite - FYI, promoting latest changes to preview.`
          });

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [check-eligibility, create-or-update-pr, auto-merge]
    
    steps:
    - name: Notify about failure
      uses: actions/github-script@v7
      with:
        script: |
          const run_url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          let message = `‚ùå **Auto-promotion to preview failed**\n\n`;
          message += `[View workflow run](${run_url})\n\n`;
          message += `Manual intervention may be required.`;
          
          // Create an issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '‚ùå Auto-promotion to preview failed',
            body: message,
            labels: ['ci/cd', 'bug'],
            assignees: ['itstimwhite']
          });