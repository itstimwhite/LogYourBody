name: CI/CD Orchestrator

on:
  push:
    branches: [main, preview, dev]
  pull_request:
    branches: [main, preview, dev]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

jobs:
  # Detect which parts of the monorepo changed
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      ios: ${{ steps.filter.outputs.ios }}
      infra: ${{ steps.filter.outputs.infra }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/web-*.yml'
            ios:
              - 'apps/ios/**'
              - '.github/workflows/ios-*.yml'
            infra:
              - 'infrastructure/**'
              - '.github/workflows/infra-*.yml'
            docs:
              - 'docs/**'
              - '**/*.md'

  # Determine which workflow strategy to use based on branch
  determine-strategy:
    name: Determine Strategy
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      strategy: ${{ steps.strategy.outputs.type }}
      should_deploy: ${{ steps.strategy.outputs.should_deploy }}
    steps:
      - id: strategy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "type=rapid" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/preview" ]]; then
            echo "type=confidence" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "type=pr" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # RAPID LOOP - Dev branch only
  rapid-web:
    name: Rapid Web
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.web == 'true' && needs.determine-strategy.outputs.strategy == 'rapid'
    uses: ./.github/workflows/web-rapid-loop.yml
    secrets: inherit

  rapid-ios:
    name: Rapid iOS
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.ios == 'true' && needs.determine-strategy.outputs.strategy == 'rapid'
    uses: ./.github/workflows/ios-rapid-loop.yml
    secrets: inherit

  # CONFIDENCE LOOP - Preview branch
  confidence-web:
    name: Confidence Web
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.web == 'true' && needs.determine-strategy.outputs.strategy == 'confidence'
    uses: ./.github/workflows/web-confidence-loop.yml
    secrets: inherit

  confidence-ios:
    name: Confidence iOS
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.ios == 'true' && needs.determine-strategy.outputs.strategy == 'confidence'
    uses: ./.github/workflows/ios-confidence-loop.yml
    secrets: inherit

  # PR CHECKS - Any branch
  pr-web-checks:
    name: PR Web Checks
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.web == 'true' && needs.determine-strategy.outputs.strategy == 'pr'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run typecheck
      - run: npm run lint
      # TODO: Re-enable once tests are fixed
      # - run: npm run test

  pr-ios-checks:
    name: PR iOS Checks
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.ios == 'true' && needs.determine-strategy.outputs.strategy == 'pr'
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
      - name: Run iOS Checks
        run: |
          cd apps/ios
          if ! command -v swiftlint &> /dev/null; then
            brew install swiftlint
          fi
          swiftlint lint --strict --reporter github-actions-logging

  # RELEASE LOOP - Main branch
  release-web:
    name: Release Web
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.web == 'true' && needs.determine-strategy.outputs.strategy == 'release'
    uses: ./.github/workflows/web-release-loop.yml
    secrets: inherit

  release-ios:
    name: Release iOS
    needs: [detect-changes, determine-strategy]
    if: needs.detect-changes.outputs.ios == 'true' && needs.determine-strategy.outputs.strategy == 'release'
    uses: ./.github/workflows/ios-release-loop.yml
    secrets: inherit

  # Summary job for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: 
      - detect-changes
      - determine-strategy
      - rapid-web
      - rapid-ios
      - confidence-web
      - confidence-ios
      - pr-web-checks
      - pr-ios-checks
      - release-web
      - release-ios
    steps:
      - name: Check Results
        run: |
          echo "Strategy: ${{ needs.determine-strategy.outputs.strategy }}"
          echo "Web changed: ${{ needs.detect-changes.outputs.web }}"
          echo "iOS changed: ${{ needs.detect-changes.outputs.ios }}"
          
          # Check if any required jobs failed
          if [[ "${{ needs.rapid-web.result }}" == "failure" ]] || \
             [[ "${{ needs.rapid-ios.result }}" == "failure" ]] || \
             [[ "${{ needs.confidence-web.result }}" == "failure" ]] || \
             [[ "${{ needs.confidence-ios.result }}" == "failure" ]] || \
             [[ "${{ needs.pr-web-checks.result }}" == "failure" ]] || \
             [[ "${{ needs.pr-ios-checks.result }}" == "failure" ]]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          fi
          
          echo "‚úÖ All CI checks passed!"

  # Slack notification for confidence loop failures
  notify-failures:
    name: Notify Failures
    runs-on: ubuntu-latest
    if: failure() && needs.determine-strategy.outputs.strategy == 'confidence'
    needs: [confidence-web, confidence-ios, determine-strategy]
    steps:
      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data '{
              "text": "üö® Confidence Loop Failed on preview branch",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üö® Confidence Loop Failed*\n\nThe nightly confidence tests have failed on the preview branch."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\npreview"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Failed Components:*\n‚Ä¢ Web: ${{ needs.confidence-web.result }}\n‚Ä¢ iOS: ${{ needs.confidence-ios.result }}"
                  }
                }
              ]
            }'