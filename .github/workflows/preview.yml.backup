name: Vercel Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm test

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: |
          # Export environment variables from the downloaded .env file
          set -a
          source .vercel/.env.preview.local || true
          set +a
          
          # Run the build
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          echo "Deploying prebuilt artifacts to Vercel Preview..."
          
          # Deploy and capture output
          if ! vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deploy.output 2>&1; then
            echo "‚ùå Deployment command failed"
            echo "Error output:"
            cat deploy.output
            exit 1
          fi
          
          # Extract deployment URL
          DEPLOYMENT_OUTPUT=$(cat deploy.output)
          echo "Raw output: $DEPLOYMENT_OUTPUT"
          
          # Try multiple patterns to extract URL
          DEPLOYMENT_URL=""
          
          # Pattern 1: Direct URL output
          if [[ "$DEPLOYMENT_OUTPUT" =~ https://[^[:space:]]+\.vercel\.app ]]; then
            DEPLOYMENT_URL="${BASH_REMATCH[0]}"
          # Pattern 2: "Inspect: URL" format
          elif [[ "$DEPLOYMENT_OUTPUT" =~ Inspect:[[:space:]]+https://[^[:space:]]+ ]]; then
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[^[:space:]]+' | head -1)
          fi
          
          if [[ -n "$DEPLOYMENT_URL" ]]; then
            echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Preview deployment successful: $DEPLOYMENT_URL"
            
            # Verify deployment status
            echo "Verifying deployment..."
            if vercel inspect "$DEPLOYMENT_URL" --token=${{ secrets.VERCEL_TOKEN }} > inspect.output 2>&1; then
              if grep -q "State.*Ready" inspect.output; then
                echo "‚úÖ Deployment verified as ready"
              else
                echo "‚ö†Ô∏è Deployment state:"
                grep "State" inspect.output || echo "State not found"
              fi
            fi
          else
            echo "‚ùå Could not extract deployment URL from output"
            echo "Full output:"
            cat deploy.output
            exit 1
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.deployment-url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview Deployment Ready!**\n\nüîó Preview URL: ${url}\n\n‚úÖ All checks passed`
            })