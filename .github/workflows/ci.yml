name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, preview ]
  pull_request:
    branches: [ main, dev, preview ]

jobs:
  # Detect what has changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web-changed: ${{ steps.changes.outputs.web }}
      ios-changed: ${{ steps.changes.outputs.ios }}
      root-changed: ${{ steps.changes.outputs.root }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
            ios:
              - 'apps/ios/**'
            root:
              - 'package.json'
              - 'package-lock.json'
              - '.github/**'
              - 'turbo.json'

  # Web app CI/CD (existing logic)
  web-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter (Web)
      run: npm run lint
      working-directory: apps/web
      continue-on-error: true

    - name: Run type check (Web)
      run: npm run typecheck
      working-directory: apps/web

    - name: Run tests (Web)
      run: npm test -- --passWithNoTests
      working-directory: apps/web
      env:
        CI: true

    - name: Build (Web)
      run: npm run build
      working-directory: apps/web
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

  # iOS CI/CD Pipeline
  ios-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.ios-changed == 'true'
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        cd apps/ios
        # Install CocoaPods if needed
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi

    - name: Build iOS App
      run: |
        cd apps/ios
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          clean build
      env:
        CODE_SIGNING_REQUIRED: NO

    - name: Run iOS Tests
      run: |
        cd apps/ios
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          test
      continue-on-error: true

    - name: Archive for TestFlight (if on dev branch)
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: |
        cd apps/ios
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -configuration Release \
          -archivePath build/LogYourBody.xcarchive \
          archive
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY }}
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

  # Auto-merge to preview branch on successful iOS CI
  ios-auto-merge:
    needs: [detect-changes, ios-ci]
    if: needs.detect-changes.outputs.ios-changed == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Auto-merge to preview
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        git fetch origin preview
        
        # Switch to preview branch or create it
        git checkout preview || git checkout -b preview
        
        # Merge dev into preview
        git merge origin/dev --no-ff -m "Auto-merge dev to preview after successful iOS CI"
        
        # Push to preview
        git push origin preview

  # TestFlight deployment from preview branch
  testflight-deploy:
    if: github.ref == 'refs/heads/preview' && github.event_name == 'push'
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        cd apps/ios
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi

    - name: Import Code Signing Certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}

    - name: Download Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

    - name: Build and Archive for TestFlight
      run: |
        cd apps/ios
        
        # Increment build number
        BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" LogYourBody/Info.plist
        
        # Archive
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath build/LogYourBody.xcarchive \
          archive
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/LogYourBody.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath build/

    - name: Upload to TestFlight
      run: |
        cd apps/ios
        xcrun altool --upload-app \
          --type ios \
          --file build/LogYourBody.ipa \
          --username "${{ secrets.APPLE_ID_EMAIL }}" \
          --password "${{ secrets.APPLE_ID_PASSWORD }}"

  # Lint job (combined for both platforms)
  lint:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.ios-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies (Web)
      if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
      run: npm ci

    - name: Run ESLint (Web)
      if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
      run: npm run lint -- --max-warnings 0
      working-directory: apps/web
      continue-on-error: true

    - name: Setup Xcode (iOS Lint)
      if: needs.detect-changes.outputs.ios-changed == 'true'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Run SwiftLint (iOS)
      if: needs.detect-changes.outputs.ios-changed == 'true'
      run: |
        cd apps/ios
        if command -v swiftlint &> /dev/null; then
          swiftlint lint --quiet
        else
          echo "SwiftLint not installed, skipping iOS linting"
        fi
      continue-on-error: true