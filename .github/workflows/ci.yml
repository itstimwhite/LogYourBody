name: CI

on:
  push:
    branches: [dev, preview]
  pull_request:
    branches: [dev, preview, main]

env:
  NODE_VERSION: '20'

# Prevent multiple CI runs on the same branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test-and-deploy:
    name: Test & Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run typecheck
        
      - name: Run tests
        run: npm test

      # Check for migration changes
      - name: Check for migration changes
        id: migration-check
        if: github.event_name == 'push'
        run: |
          if git diff --quiet HEAD^ HEAD -- supabase/migrations/; then
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "No migration changes detected"
          else
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "Migration changes detected"
            git diff --name-only HEAD^ HEAD -- supabase/migrations/
          fi

      # Run database migrations if needed
      - name: Install Supabase CLI
        if: github.event_name == 'push' && steps.migration-check.outputs.has-migrations == 'true'
        run: npm install -g supabase@latest

      - name: Run database migrations
        if: github.event_name == 'push' && steps.migration-check.outputs.has-migrations == 'true'
        run: |
          echo "Running database migrations..."
          if [ "${{ github.ref }}" == "refs/heads/preview" ]; then
            supabase db push --db-url "${{ secrets.PREVIEW_DATABASE_URL }}"
          else
            supabase db push --db-url "${{ secrets.DEV_DATABASE_URL }}"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      # Deploy to Vercel for branch pushes (not PRs, those are handled by preview.yml)
      - name: Install Vercel CLI
        if: github.event_name == 'push'
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: github.event_name == 'push'
        run: |
          if [ "${{ github.ref }}" == "refs/heads/preview" ]; then
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        if: github.event_name == 'push'
        run: |
          # Export environment variables from the downloaded .env file
          set -a
          source .vercel/.env.development.local || true
          set +a
          
          # Run the build
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel
        if: github.event_name == 'push'
        id: deploy
        run: |
          echo "Deploying prebuilt artifacts to Vercel..."
          
          # Deploy and capture output
          if ! vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deploy.output 2>&1; then
            echo "❌ Deployment command failed"
            echo "Error output:"
            cat deploy.output
            exit 1
          fi
          
          # Extract deployment URL
          DEPLOYMENT_OUTPUT=$(cat deploy.output)
          echo "Raw output: $DEPLOYMENT_OUTPUT"
          
          # Try multiple patterns to extract URL
          DEPLOYMENT_URL=""
          
          # Pattern 1: Direct URL output
          if [[ "$DEPLOYMENT_OUTPUT" =~ https://[^[:space:]]+\.vercel\.app ]]; then
            DEPLOYMENT_URL="${BASH_REMATCH[0]}"
          # Pattern 2: "Inspect: URL" format
          elif [[ "$DEPLOYMENT_OUTPUT" =~ Inspect:[[:space:]]+https://[^[:space:]]+ ]]; then
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[^[:space:]]+' | head -1)
          # Pattern 3: Production deployment message
          elif [[ "$DEPLOYMENT_OUTPUT" =~ "production" ]]; then
            echo "ℹ️ Deployment ready for production promotion"
            # Try to get the preview URL from the output
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[^[:space:]]+\.vercel\.app' | head -1 || echo "")
          fi
          
          if [[ -n "$DEPLOYMENT_URL" ]]; then
            echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "✅ Deployment successful: $DEPLOYMENT_URL"
            
            # Verify deployment status
            echo "Verifying deployment..."
            if vercel inspect "$DEPLOYMENT_URL" --token=${{ secrets.VERCEL_TOKEN }} > inspect.output 2>&1; then
              if grep -q "State.*Ready" inspect.output; then
                echo "✅ Deployment verified as ready"
              else
                echo "⚠️ Deployment state:"
                grep "State" inspect.output || echo "State not found"
              fi
            fi
          else
            echo "❌ Could not extract deployment URL from output"
            echo "Full output:"
            cat deploy.output
            exit 1
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Auto-versioning only on direct pushes to branches (not PRs)
  auto-version:
    name: Auto Version
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/preview') &&
      github.actor != 'github-actions[bot]' &&
      !contains(github.event.head_commit.message, 'chore: bump version')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
      - name: Run version bump
        run: |
          node scripts/version-manager.cjs
          
      - name: Push changes
        run: |
          git push origin HEAD:${{ github.ref_name }}

  # Create PR from dev to preview after successful deployment
  create-pr-to-preview:
    name: Auto PR to Preview
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: |
      github.ref == 'refs/heads/dev' && 
      github.event_name == 'push' &&
      github.actor != 'github-actions[bot]'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for existing PR
        id: check-pr
        run: |
          PR_COUNT=$(gh pr list --base preview --head dev --state open --json number --jq '. | length')
          echo "count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(gh pr list --base preview --head dev --state open --json number --jq '.[0].number')
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Found existing PR #$PR_NUMBER"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        if: steps.check-pr.outputs.count == '0'
        id: create-pr
        run: |
          cat > pr-body.md << 'EOF'
          ## Automated Pull Request
          
          This PR was automatically created after successful tests on the dev branch.
          
          ### ✅ All Checks Passed
          - Tests: ✅ Passed
          - Type checking: ✅ Passed
          - Linting: ✅ Passed
          - Vercel Deployment: ✅ Successful
          
          ### 📋 Changes
          View commit history for detailed changes.
          
          ### 🤖 Auto-merge
          This PR will be automatically merged if all checks continue to pass.
          
          ---
          *This is an automated pull request created by GitHub Actions.*
          EOF
          
          PR_URL=$(gh pr create \
            --base preview \
            --head dev \
            --title "🚀 Auto-merge: dev → preview" \
            --body-file pr-body.md \
            --label "automated" \
            --label "dev-to-preview")
          
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ Created PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Enable Auto-merge
        if: steps.check-pr.outputs.count == '0' && steps.create-pr.outputs.pr-number != ''
        run: |
          gh pr merge --auto --merge "${{ steps.create-pr.outputs.pr-number }}"
          echo "✅ Enabled auto-merge for PR #${{ steps.create-pr.outputs.pr-number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Existing PR
        if: steps.check-pr.outputs.count != '0'
        run: |
          gh pr comment ${{ steps.check-pr.outputs.number }} --body "🔄 Updated with latest changes from dev branch"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create PR from preview to main (requires manual approval)
  create-pr-to-main:
    name: PR to Main (Manual)
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: |
      github.ref == 'refs/heads/preview' && 
      github.event_name == 'push' &&
      github.actor != 'github-actions[bot]'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for existing PR
        id: check-pr
        run: |
          PR_COUNT=$(gh pr list --base main --head preview --state open --json number --jq '. | length')
          echo "count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(gh pr list --base main --head preview --state open --json number --jq '.[0].number')
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Found existing PR #$PR_NUMBER"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        if: steps.check-pr.outputs.count == '0'
        run: |
          cat > pr-body.md << 'EOF'
          ## Release Pull Request
          
          This PR was automatically created after successful tests on the preview branch.
          
          ### ✅ All Checks Passed
          - Tests: ✅ Passed
          - Type checking: ✅ Passed
          - Linting: ✅ Passed
          - Vercel Deployment: ✅ Successful
          
          ### 📋 Release Notes
          View commit history for detailed changes.
          
          ### ⚠️ Manual Review Required
          This PR requires manual review and approval before merging to production.
          
          ### Checklist
          - [ ] All features tested in preview environment
          - [ ] No breaking changes or proper migration plan in place
          - [ ] Performance impact assessed
          - [ ] Security implications reviewed
          
          ---
          *This is an automated pull request created by GitHub Actions.*
          EOF
          
          PR_URL=$(gh pr create \
            --base main \
            --head preview \
            --title "🚀 Release: preview → main" \
            --body-file pr-body.md \
            --label "release" \
            --label "preview-to-main")
          
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "✅ Created PR #$PR_NUMBER - Manual approval required"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Existing PR
        if: steps.check-pr.outputs.count != '0'
        run: |
          gh pr comment ${{ steps.check-pr.outputs.number }} --body "🔄 Updated with latest changes from preview branch"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Auto-merge Dependabot PRs if tests pass
  auto-merge-dependabot:
    name: Auto-merge Dependabot
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Auto-merge minor/patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}