name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, preview ]
  pull_request:
    branches: [ main, dev, preview ]

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Define environment based on branch
env:
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/preview' && 'preview' || 'development' }}

jobs:
  # Detect what has changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web-changed: ${{ steps.changes.outputs.web }}
      ios-changed: ${{ steps.changes.outputs.ios }}
      root-changed: ${{ steps.changes.outputs.root }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
            ios:
              - 'apps/ios/**'
            root:
              - 'package.json'
              - 'package-lock.json'
              - '.github/**'
              - 'turbo.json'

  # Web Lint (runs in parallel with other jobs)
  web-lint:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            node_modules
            apps/web/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
      
      - name: Run ESLint
        run: npm run lint
        working-directory: apps/web
      
      - name: Run TypeScript Check
        run: npm run typecheck
        working-directory: apps/web

  # Web Tests (runs in parallel with sharding)
  web-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]  # Run tests in 3 parallel shards
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run Tests (Shard ${{ matrix.shard }}/3)
        run: npm test -- --shard=${{ matrix.shard }}/3 --passWithNoTests
        working-directory: apps/web
        env:
          CI: true
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.shard }}
          path: apps/web/coverage/
          retention-days: 7

  # Web Build (runs in parallel, only waits for lint)
  web-build:
    needs: [detect-changes, web-lint]
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.root-changed == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/preview' && 'preview' || 'development' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build
        run: npm run build
        working-directory: apps/web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || 'pk_test_Y2xlcmsudGVzdC5jbGVyay5kZXYk' }}
          NEXT_TELEMETRY_DISABLED: 1

  # iOS CI/CD Pipeline
  ios-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.ios-changed == 'true'
    runs-on: macos-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/preview' && 'preview' || 'development' }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Cache SwiftLint
      uses: actions/cache@v4
      id: swiftlint-cache
      with:
        path: /usr/local/bin/swiftlint
        key: ${{ runner.os }}-swiftlint-0.55.1

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install SwiftLint
      if: steps.swiftlint-cache.outputs.cache-hit != 'true'
      run: brew install swiftlint

    - name: Install Ruby dependencies
      run: |
        cd apps/ios
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Setup iOS Dependencies
      run: |
        cd apps/ios
        # Create placeholder Supabase.xcconfig for CI
        if [ ! -f "Supabase.xcconfig" ]; then
          echo "// Supabase Configuration (CI Placeholder)" > Supabase.xcconfig
          echo "SUPABASE_URL = https://placeholder.supabase.co" >> Supabase.xcconfig
          echo "SUPABASE_ANON_KEY = placeholder-anon-key" >> Supabase.xcconfig
        fi
        # Create placeholder Config.xcconfig for CI
        if [ ! -f "LogYourBody/Config.xcconfig" ]; then
          echo "// Configuration (CI Placeholder)" > LogYourBody/Config.xcconfig
          echo "CLERK_PUBLISHABLE_KEY = placeholder-clerk-key" >> LogYourBody/Config.xcconfig
        fi
        # Install CocoaPods if needed
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi

    - name: Run SwiftLint Check
      run: |
        cd apps/ios
        bundle exec fastlane lint

    - name: Build iOS App
      run: |
        cd apps/ios
        bundle exec fastlane ci_build
      env:
        CODE_SIGNING_REQUIRED: NO

    - name: Run iOS Tests
      run: |
        cd apps/ios
        bundle exec fastlane test
      continue-on-error: true

    - name: Archive for TestFlight (if on dev branch)
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: |
        cd apps/ios
        # For now, continue using xcodebuild until match is set up
        xcodebuild -project LogYourBody.xcodeproj \
          -scheme LogYourBody \
          -configuration Release \
          -archivePath build/LogYourBody.xcarchive \
          archive
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY }}
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

  # Auto-merge to preview branch on successful iOS CI
  ios-auto-merge:
    needs: [detect-changes, ios-ci]
    if: needs.detect-changes.outputs.ios-changed == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Auto-merge to preview
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        git fetch origin preview
        
        # Switch to preview branch or create it
        git checkout preview || git checkout -b preview
        
        # Merge dev into preview
        git merge origin/dev --no-ff -m "Auto-merge dev to preview after successful iOS CI"
        
        # Push to preview
        git push origin preview

  # TestFlight deployment from preview branch
  testflight-deploy:
    if: github.ref == 'refs/heads/preview' && github.event_name == 'push'
    runs-on: macos-latest
    environment:
      name: preview
      url: https://testflight.apple.com
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: apps/ios/vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install dependencies
      run: |
        cd apps/ios
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        if [ -f "Podfile" ]; then
          sudo gem install cocoapods
          pod install
        fi

    - name: Import Code Signing Certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}

    - name: Download Provisioning Profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

    - name: Build and Deploy to TestFlight
      run: |
        cd apps/ios
        bundle exec fastlane beta
      env:
        APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        IOS_PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}


