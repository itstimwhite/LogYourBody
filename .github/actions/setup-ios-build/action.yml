name: 'Setup iOS Build Environment'
description: 'Install and cache iOS build tools (SwiftLint, xcbeautify)'
inputs:
  xcode-version:
    description: 'Xcode version to use'
    required: false
    default: '16.1'
  working-directory:
    description: 'Working directory for iOS project'
    required: false
    default: 'apps/ios'

runs:
  using: 'composite'
  steps:
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Cache Homebrew packages
      uses: actions/cache@v4
      id: homebrew-cache
      with:
        path: |
          /usr/local/Cellar/swiftlint
          /usr/local/Cellar/xcbeautify
          /opt/homebrew/Cellar/swiftlint
          /opt/homebrew/Cellar/xcbeautify
        key: ${{ runner.os }}-homebrew-swiftlint-xcbeautify-${{ hashFiles('.github/actions/setup-ios-build/action.yml') }}
        restore-keys: |
          ${{ runner.os }}-homebrew-swiftlint-xcbeautify-

    - name: Install SwiftLint and xcbeautify
      shell: bash
      run: |
        # Check if tools are already available
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint..."
          brew install swiftlint || {
            echo "::warning::Failed to install SwiftLint via Homebrew"
            # Fallback: Download binary directly
            SWIFTLINT_VERSION="0.57.0"
            curl -L "https://github.com/realm/SwiftLint/releases/download/${SWIFTLINT_VERSION}/portable_swiftlint.zip" -o swiftlint.zip
            unzip swiftlint.zip -d /usr/local/bin
            chmod +x /usr/local/bin/swiftlint
          }
        else
          echo "SwiftLint already installed: $(swiftlint version)"
        fi
        
        if ! command -v xcbeautify &> /dev/null; then
          echo "Installing xcbeautify..."
          brew install xcbeautify || {
            echo "::warning::Failed to install xcbeautify via Homebrew"
            # Fallback: Build from source or use alternative
            echo "Using xcpretty as fallback"
            gem install xcpretty
          }
        else
          echo "xcbeautify already installed: $(xcbeautify --version)"
        fi

    - name: Setup Ruby and Bundler
      uses: ./.github/actions/setup-ruby-bundler
      with:
        working-directory: ${{ inputs.working-directory }}
        cache-key-prefix: 'ios-gems'

    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.working-directory }}/SourcePackages
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles(format('{0}/LogYourBody.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved', inputs.working-directory)) }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Verify tools
      shell: bash
      run: |
        echo "=== Tool Versions ==="
        echo "Xcode: $(xcodebuild -version | head -1)"
        echo "SwiftLint: $(swiftlint version || echo 'Not installed')"
        echo "xcbeautify: $(xcbeautify --version || echo 'Not installed')"
        echo "Ruby: $(ruby --version)"
        echo "Bundler: $(bundle --version)"